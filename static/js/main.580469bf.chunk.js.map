{"version":3,"sources":["reportWebVitals.ts","features/Login/Login.tsx","features/PasswordRecovery/PasswordRecovery.tsx","features/Profile/Profile.tsx","api/auth-api.ts","app/redux/app-reducer.ts","app/redux/auth-reducer.ts","features/Registration/Registration.tsx","features/EnteringANewPassword/EnteringANewPassword.tsx","features/Welcome/Welcome.tsx","features/Header/Pages.tsx","features/Header/Header.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","app/App.tsx","app/redux/store.ts","index.tsx","features/Header/Header.module.scss","features/Registration/Registration.module.scss"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Login","className","s","login","PasswordRecovery","passwordRecovery","Profile","profile","instance","axios","create","baseURL","withCredentials","AuthApi","data","post","initialState","error","status","isInitialized","setAppErrorAC","type","setAppStatusAC","isRegister","setIsRegisterAC","Registration","dispatch","useDispatch","useSelector","state","auth","useState","isVisible","setIsVisible","handleClickShowPassword","handleMouseDownPassword","event","preventDefault","formik","useFormik","initialValues","email","password","confirmPassword","validate","values","errors","test","length","onSubmit","registrationValues","res","catch","e","response","finally","resetForm","emailError","touched","passwordError","confirmPasswordError","to","PATH","LOGIN","Grid","container","registration","justifyContent","Paper","elevation","style","padding","handleSubmit","FormControl","form","formLabel","FormGroup","InputLabel","OutlinedInput","getFieldProps","endAdornment","InputAdornment","position","IconButton","onClick","onMouseDown","Button","variant","color","FormLabel","EnteringANewPassword","enteringANewPassword","Welcome","welcome","WELCOME","PASSWORD_RECOVERY","REGISTRATION","ENTERING_A_NEW_PASSWORD","PROFILE","Pages","path","element","Header","links","link","isActive","active","Alert","React","forwardRef","props","ref","ErrorSnackbar","app","handleClose","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","App","height","LinearProgress","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.580469bf.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport s from './Login.module.scss';\r\n\r\nexport const Login = () => {\r\n    return (\r\n        <div className={s.login}>\r\n            login\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport s from './PasswordRecovery.module.scss';\r\n\r\nexport const PasswordRecovery = () => {\r\n    return (\r\n        <div className={s.passwordRecovery}>\r\n            PasswordRecovery\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport s from './Profile.module.scss';\r\n\r\nexport const Profile = () => {\r\n    return (\r\n        <div className={s.profile}>\r\n            Profile\r\n        </div>\r\n    );\r\n};\r\n\r\n","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    /*baseURL: process.env.REACT_APP_BACK_URL || 'http://localhost:7542/2.0/',*/\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\r\n    withCredentials: true,\r\n})\r\n\r\nexport const AuthApi = {\r\n    setNewPass(password: string, token: string) {\r\n        return instance.post(\"/auth/set-new-password\", {password: password, resetPasswordToken: token})\r\n    },\r\n    registration(data: RegistrationParamsType) {\r\n        return instance.post(\"/auth/register\", data)\r\n    },\r\n    recoveryPassword(email: string) {\r\n        return instance.post(\r\n            \"/auth/forgot\",\r\n            {\r\n                email, // кому восстанавливать пароль\r\n                from: \"test-front-admin <ai73a@yandex.by>\",\r\n                // можно указать разработчика фронта)\r\n                message: `<div style=\"background-color: #f7f7f7; padding: 15px\">\r\n                    Follow \r\n                    <a href='http://localhost:3000/#/set-new-password/$token$'>\r\n                    this link</a> to recover your password\r\n                    </div>` // хтмп-письмо, вместо $token$ бэк вставит токен\r\n\r\n            }\r\n        )\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post('/auth/login', {email, password, rememberMe})\r\n    },\r\n    logout() {\r\n        return instance.delete<{ info: string }>('/auth/me', {})\r\n    },\r\n    authMe() {\r\n        return instance.post('/auth/me', {})\r\n    },\r\n    updateUserInfo(data: UpdateUserInfo) {\r\n        return instance.put('/auth/me', data)\r\n    }\r\n}\r\n\r\n// type\r\nexport type RegistrationParamsType = {\r\n    email: string\r\n    password: string\r\n}\r\nexport type UpdateUserInfo = {\r\n    name: string\r\n    avatar: string\r\n}\r\nexport type LoginResponseType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar?: string\r\n    publicCardPacksCount: number // количество колод\r\n    created: Date\r\n    updated: Date\r\n    isAdmin: boolean\r\n    verified: boolean // подтвердил ли почту\r\n    rememberMe: boolean\r\n    error?: string\r\n}","type InitialStateType = {\r\n    error: string | null\r\n    status: RequestStatusType\r\n    isInitialized: boolean\r\n}\r\nconst initialState: InitialStateType = {\r\n    error: null,\r\n    status: 'idle',\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type){\r\n        case 'SET_APP_ERROR':{\r\n            return {...state, error: action.error}\r\n        }\r\n        case 'SET_APP_STATUS':{\r\n            return {...state, status: action.status}\r\n        }\r\n        case 'SET_APP_INITIALIZED':{\r\n            return {...state, isInitialized: action.isInitialized}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type:'SET_APP_ERROR', error} as const )\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type:'SET_APP_STATUS', status} as const )\r\nexport const setAppInitializedAC = (isInitialized: boolean) => ({type:'SET_APP_INITIALIZED',isInitialized} as const )\r\n\r\n\r\nexport type AppActionsType = ReturnType<typeof setAppErrorAC> | ReturnType<typeof setAppStatusAC> | ReturnType<typeof setAppInitializedAC>\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'","import {AuthApi, RegistrationParamsType} from \"../../api/auth-api\";\r\nimport {ThunkType} from \"./store\";\r\nimport {setAppErrorAC, setAppStatusAC} from \"./app-reducer\";\r\n\r\ntype InitialStateType = {\r\n    isRegister: boolean\r\n}\r\nconst initialState: InitialStateType = {\r\n    isRegister: false\r\n}\r\n\r\nexport const authReducer = (state = initialState, action: AuthActionsType): InitialStateType => {\r\n    switch (action.type){\r\n        case 'SET_IS_REGISTER':{\r\n            return {...state, isRegister: action.isRegister}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport const setIsRegisterAC = (isRegister: boolean) => ({type:'SET_IS_REGISTER', isRegister} as const )\r\n\r\nexport const registrationTC = (data: RegistrationParamsType): ThunkType => (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    AuthApi.registration(data)\r\n        .then(res => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setIsRegisterAC(true))\r\n        })\r\n        .catch((e) => {\r\n            if (e.response.data.error){\r\n                dispatch(setAppErrorAC(e.response.data.error))\r\n                dispatch(setAppStatusAC('failed'))\r\n            }\r\n        })\r\n        .finally(()=>{\r\n            dispatch(setIsRegisterAC(false))\r\n        })\r\n}\r\n\r\nexport type AuthActionsType = ReturnType<typeof setIsRegisterAC>","import React, {useState} from 'react';\r\nimport s from './Registration.module.scss';\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Button, FormControl, FormGroup, FormLabel, Grid, Paper} from \"@material-ui/core\";\r\nimport {registrationTC} from \"../../app/redux/auth-reducer\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport OutlinedInput from \"@mui/material/OutlinedInput\";\r\nimport InputAdornment from \"@mui/material/InputAdornment\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport VisibilityOff from \"@mui/icons-material/VisibilityOff\";\r\nimport Visibility from \"@mui/icons-material/Visibility\";\r\nimport {Navigate, NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../Header/Pages\";\r\nimport {RegistrationParamsType} from \"../../api/auth-api\";\r\nimport {AppRootStateType} from \"../../app/redux/store\";\r\n\r\n\r\nexport const Registration = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const isRegister = useSelector<AppRootStateType, boolean>(state => state.auth.isRegister)\r\n    const [isVisible, setIsVisible] = useState<boolean>(false)\r\n\r\n    const handleClickShowPassword = () => {\r\n        setIsVisible(!isVisible)\r\n    };\r\n    const handleMouseDownPassword = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        confirmPassword?: string\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            confirmPassword: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = 'Required'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length < 7) {\r\n                errors.password = 'Invalid password'\r\n            }\r\n\r\n            if (!values.confirmPassword) {\r\n                errors.confirmPassword = 'Required'\r\n            } else if (values.confirmPassword.length < 8) {\r\n                errors.confirmPassword = 'Invalid password'\r\n            } else if (values.password !== values.confirmPassword) {\r\n                errors.confirmPassword = 'passwords must be equal'\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            const registrationValues: RegistrationParamsType = {email: values.email, password: values.password}\r\n            dispatch(registrationTC(registrationValues))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    const emailError = formik.touched.email && formik.errors.email ? <div>{formik.errors.email}</div> : null\r\n    const passwordError = formik.touched.password && formik.errors.password ? <div>{formik.errors.password}</div> : null\r\n    const confirmPasswordError = formik.touched.confirmPassword && formik.errors.confirmPassword ?\r\n        <div>{formik.errors.confirmPassword}</div> : null\r\n\r\n    if (isRegister) return <Navigate to={PATH.LOGIN}/>\r\n\r\n    return <Grid container className={s.registration} justifyContent={'center'}>\r\n        <Paper elevation={5} style={{padding: '20px 50px'}}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl className={s.form}>\r\n                    <h1 className={s.formLabel}>\r\n                        SIGN UP\r\n                    </h1>\r\n                    <FormGroup>\r\n                        <FormControl>\r\n                            <InputLabel>Email</InputLabel>\r\n                            <OutlinedInput\r\n                                error={!!emailError}\r\n                                {...formik.getFieldProps('email')}\r\n                            />\r\n                            <div className={s.error}>{emailError}</div>\r\n                        </FormControl>\r\n                        <FormControl>\r\n                            <InputLabel>Password</InputLabel>\r\n                            <OutlinedInput\r\n                                type={isVisible ? 'text' : 'password'}\r\n                                error={!!passwordError}\r\n                                {...formik.getFieldProps('password')}\r\n                                endAdornment={\r\n                                    <InputAdornment position=\"end\">\r\n                                        <IconButton\r\n                                            aria-label=\"toggle password visibility\"\r\n                                            onClick={handleClickShowPassword}\r\n                                            onMouseDown={handleMouseDownPassword}\r\n                                        >\r\n                                            {isVisible ? <VisibilityOff/> : <Visibility/>}\r\n                                        </IconButton>\r\n                                    </InputAdornment>\r\n                                }\r\n                            />\r\n                            <div className={s.error}>{passwordError}</div>\r\n                        </FormControl>\r\n                        <FormControl>\r\n                            <InputLabel>Confirm password</InputLabel>\r\n                            <OutlinedInput\r\n                                type={isVisible ? 'text' : 'password'}\r\n                                error={!!confirmPasswordError}\r\n                                {...formik.getFieldProps('confirmPassword')}\r\n                                endAdornment={\r\n                                    <InputAdornment position=\"end\">\r\n                                        <IconButton\r\n                                            aria-label=\"toggle password visibility\"\r\n                                            onClick={handleClickShowPassword}\r\n                                            onMouseDown={handleMouseDownPassword}\r\n                                        >\r\n                                            {isVisible ? <VisibilityOff/> : <Visibility/>}\r\n                                        </IconButton>\r\n                                    </InputAdornment>\r\n                                }\r\n                            />\r\n                            <div className={s.error}>{confirmPasswordError}</div>\r\n                        </FormControl>\r\n                        <Button\r\n                            type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Sign up\r\n                        </Button>\r\n                        <FormLabel className={s.formLabel}>\r\n                            <div>Already have an account? <NavLink to={PATH.LOGIN}>SIGN IN</NavLink></div>\r\n                        </FormLabel>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Paper>\r\n    </Grid>\r\n}","import React from 'react';\r\nimport s from './EnteringANewPassword.module.scss';\r\n\r\nexport const EnteringANewPassword = () => {\r\n    return (\r\n        <div className={s.enteringANewPassword}>\r\n            EnteringANewPassword\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport s from './Welcome.module.scss';\r\n\r\nexport const Welcome = () => {\r\n    return (\r\n        <div className={s.welcome}>\r\n            Welcome\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react'\nimport {Navigate, Route, Routes} from \"react-router-dom\";\nimport {Login} from \"../Login/Login\";\nimport {PasswordRecovery} from \"../PasswordRecovery/PasswordRecovery\";\nimport {Profile} from \"../Profile/Profile\";\nimport {Registration} from \"../Registration/Registration\";\nimport {EnteringANewPassword} from \"../EnteringANewPassword/EnteringANewPassword\";\nimport {Welcome} from \"../Welcome/Welcome\";\n\nexport const PATH = {\n    WELCOME: '/welcome',\n    LOGIN: '/login',\n    PASSWORD_RECOVERY: '/passwordRecovery',\n    REGISTRATION: '/registration',\n    ENTERING_A_NEW_PASSWORD: '/enteringANewPassword',\n    PROFILE: '/profile'\n}\n\nexport function Pages() {\n    return (\n        <div>\n            <Routes>\n                <Route path={'/'} element={<Navigate to={PATH.WELCOME}/>}/>\n\n                <Route path={PATH.LOGIN} element={<Login/>}/>\n                <Route path={PATH.PASSWORD_RECOVERY} element={<PasswordRecovery/>}/>\n                <Route path={PATH.PROFILE} element={<Profile/>}/>\n                <Route path={PATH.REGISTRATION} element={<Registration/>}/>\n                <Route path={PATH.ENTERING_A_NEW_PASSWORD} element={<EnteringANewPassword/>}/>\n\n                <Route path={'/*'} element={<Welcome/>}/>\n            </Routes>\n        </div>\n    )\n}\n\n","import React from 'react'\nimport {NavLink} from \"react-router-dom\";\nimport {PATH} from \"./Pages\";\nimport s from './Header.module.scss'\n\nexport const Header = () => {\n\n    return (\n        <div className={s.container}>\n            <div className={s.links}>\n                <div className={s.link}>\n                    <NavLink className={({isActive}) => isActive ? s.active : ''}\n                             to={PATH.PROFILE}>\n                        Profile\n                    </NavLink></div>\n                <div className={s.link}><NavLink className={({isActive}) => isActive ? s.active : ''}\n                                                 to={PATH.LOGIN}>\n                    Login\n                </NavLink></div>\n                <div className={s.link}><NavLink className={({isActive}) => isActive ? s.active : ''}\n                                                 to={PATH.REGISTRATION}>\n                    Registration\n                </NavLink></div>\n                <div className={s.link}><NavLink className={({isActive}) => isActive ? s.active : ''}\n                                                 to={PATH.PASSWORD_RECOVERY}>\n                    Password recovery+\n                </NavLink></div>\n                <div className={s.link}><NavLink className={({isActive}) => isActive ? s.active : ''}\n                                                 to={PATH.ENTERING_A_NEW_PASSWORD}>\n                    Entering a new password\n                </NavLink></div>\n                <div className={s.link}>Hover me!</div>\n            </div>\n        </div>\n    )\n}\n\n","import React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport {AppRootStateType} from \"../../app/redux/store\";\r\nimport {setAppErrorAC} from \"../../app/redux/app-reducer\";\r\nimport {Snackbar} from \"@material-ui/core\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null >(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react';\nimport {HashRouter} from 'react-router-dom';\nimport {Header} from \"../features/Header/Header\";\nimport {Pages} from \"../features/Header/Pages\";\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\nimport {useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./redux/store\";\nimport {RequestStatusType} from \"./redux/app-reducer\";\nimport {LinearProgress} from \"@material-ui/core\";\n\nexport const App = () => {\n\n    const status = useSelector<AppRootStateType, RequestStatusType>( state => state.app.status)\n\n    return (\n        <div>\n            <div style={{height:'5px'}}>{status === 'loading' && <LinearProgress/>}</div>\n            <HashRouter>\n                <ErrorSnackbar/>\n                <Header/>\n                <Pages/>\n            </HashRouter>\n        </div>\n    );\n};\n\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk, {ThunkAction} from \"redux-thunk\";\r\nimport {AppActionsType, appReducer} from \"./app-reducer\";\r\nimport {AuthActionsType, authReducer} from \"./auth-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n\r\nexport type RootActionsType = AppActionsType | AuthActionsType\r\n\r\nexport type ThunkType<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, RootActionsType>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport {App} from \"./app/App\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./app/redux/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Header_container__aGOgC\",\"links\":\"Header_links__3UEMk\",\"link\":\"Header_link__X9MNl\",\"active\":\"Header_active__3y_9i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"registration\":\"Registration_registration__OSY5c\",\"form\":\"Registration_form__PAYQL\",\"error\":\"Registration_error__3SRYL\",\"formLabel\":\"Registration_formLabel__1M3OE\"};"],"sourceRoot":""}