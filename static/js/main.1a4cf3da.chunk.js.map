{"version":3,"sources":["components/c7-Loader/Lodader.module.scss","reportWebVitals.ts","app/redux/app-reducer.ts","api/api.ts","app/redux/auth-reducer.ts","app/redux/login-reducer.ts","app/redux/store.ts","features/Login/LoginMUI.tsx","components/c7-Loader/Loader.tsx","components/VisibleIconFroPassword/VisibleIcon.tsx","features/Login/Login.tsx","features/PasswordRecovery/PasswordRecovery.tsx","features/Profile/Profile.tsx","features/Registration/Registration.tsx","features/EnteringANewPassword/EnteringANewPassword.tsx","features/Welcome/Welcome.tsx","features/Header/Pages.tsx","features/Header/Header.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","app/App.tsx","index.tsx","features/Registration/Registration.module.scss","features/Login/Login.module.scss","features/Header/Header.module.scss"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","status","error","success","isInitialized","setAppErrorAC","type","setAppStatusAC","instance","axios","create","baseURL","withCredentials","authAPI","data","post","isRegister","setIsRegisterAC","_id","email","name","avatar","publicCardPacksCount","created","Date","updated","isAdmin","verified","rememberMe","isAuth","rootReducer","combineReducers","app","state","action","auth","login","store","createStore","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","window","styleBtn","borderRadius","margin","width","height","textTransform","background","fontSize","fontWeight","color","styleForm","marginTop","padding","textAlign","minHeight","backgroundColor","boxShadow","styleInput","styleRememberMe","styleRequired","Loader","className","s","overlay","progress","CircularProgress","size","VisibleIcon","props","InputAdornment","position","IconButton","onClick","setIsVisible","isVisible","onMouseDown","event","preventDefault","Login","dispatch","loadingStatus","useState","hidden","setHidden","formik","useFormik","initialValues","password","validationSchema","Yup","required","min","onSubmit","values","setSubmitting","res","response","message","resetForm","to","PATH","PROFILE","Grid","container","justifyContent","style","item","handleSubmit","FormControl","variant","FormLabel","styleH1","FormGroup","TextField","id","label","touched","errors","getFieldProps","InputProps","endAdornment","FormControlLabel","control","Checkbox","checked","marginRight","forgotPassword","PASSWORD_RECOVERY","Button","styleP","signUp","REGISTRATION","PasswordRecovery","passwordRecovery","Profile","profile","Registration","registration","Paper","elevation","RegisterForm","confirmPassword","validate","test","length","registrationValues","catch","e","finally","emailError","passwordError","confirmPasswordError","LOGIN","form","formLabel","InputLabel","OutlinedInput","EnteringANewPassword","enteringANewPassword","Welcome","welcome","WELCOME","NEW_PASSWORD","Pages","path","element","Header","links","title","link","NavLinkItem","isActive","active","Alert","React","forwardRef","ref","ErrorSnackbar","handleClose","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","App","LinearProgress","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1a4cf3da.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"overlay\":\"Lodader_overlay__14XV0\",\"progress\":\"Lodader_progress__1JlPC\",\"scaling\":\"Lodader_scaling__3Ev6u\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as null | string,\r\n    success: null as null | string,\r\n    isInitialized: false as boolean\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type){\r\n        case 'SET_APP_ERROR':{\r\n            return {...state, error: action.error}\r\n        }\r\n        case 'SET_APP_STATUS':{\r\n            return {...state, status: action.status}\r\n        }\r\n        case 'SET_APP_INITIALIZED':{\r\n            return {...state, isInitialized: action.isInitialized}\r\n        }\r\n        case 'SET_APP_SUCCESS':{\r\n            return {...state, success: action.success}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\n// action creators\r\nexport const setAppErrorAC = (error: string | null) => ({type:'SET_APP_ERROR', error} as const )\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type:'SET_APP_STATUS', status} as const )\r\nexport const setAppInitializedAC = (isInitialized: boolean) => ({type:'SET_APP_INITIALIZED',isInitialized} as const )\r\nexport const setAppSuccessAC = (success: string | null) => ({type:'SET_APP_SUCCESS',success} as const )\r\n\r\n//types\r\nexport type AppActionsType =\r\n    ReturnType<typeof setAppErrorAC> |\r\n    ReturnType<typeof setAppStatusAC> |\r\n    ReturnType<typeof setAppSuccessAC> |\r\n    ReturnType<typeof setAppInitializedAC>\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'","import axios from 'axios';\r\n\r\nexport const instance = axios.create({\r\n    baseURL: process.env.NODE_ENV === 'development'\r\n        ? 'http://localhost:7542/2.0/'\r\n        : 'https://neko-back.herokuapp.com/2.0/',\r\n    withCredentials: true,\r\n})\r\n\r\n// API\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<AuthResponseType>('/auth/login', data)\r\n    },\r\n    register(data: RegisterParamsType) {\r\n        return instance.post<RegisterResponseType>('/auth/register', data)\r\n    },\r\n    me() {\r\n        return instance.post<AuthResponseType>('auth/me', {})\r\n    },\r\n    logout() {\r\n        return instance.delete<DefaultResponseType>('/auth/me')\r\n    },\r\n    updateProfile(data: UpdateProfileDataType) {\r\n        return instance.put<UpdatedUserResponseType>('/auth/me', data)\r\n    },\r\n    forgotPassword(data: ForgotPasswordDataType) {\r\n        return instance.post<DefaultResponseType>('/auth/forgot', data)\r\n    },\r\n    setNewPassword(data: SetPasswordDataType) {\r\n        return instance.post<DefaultResponseType>('/auth/set-new-password', data)\r\n    },\r\n    blockContent(data: BlockContentDataType) {\r\n        return instance.post<BlockContentResponseType>('/auth/block', data)\r\n    }\r\n}\r\n\r\n// request types\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\nexport type RegisterParamsType = {\r\n    email: string\r\n    password: string\r\n}\r\nexport type UpdateProfileDataType = {\r\n    name: string\r\n    avatar: string\r\n}\r\nexport type ForgotPasswordDataType = {\r\n    email: string\r\n    message: string\r\n}\r\nexport type SetPasswordDataType = {\r\n    password: string\r\n    resetPasswordToken: string\r\n}\r\nexport type BlockContentDataType = {\r\n    id: string\r\n    blockReason: string\r\n}\r\n\r\n// response types\r\n\r\nexport type DefaultResponseType = {\r\n    info: string\r\n    error?: string\r\n}\r\n\r\nexport type AuthResponseType = {\r\n    _id: string;\r\n    email: string;\r\n    name: string;\r\n    avatar?: string;\r\n    publicCardPacksCount: number; // количество колод\r\n    created: Date;\r\n    updated: Date;\r\n    isAdmin: boolean;\r\n    verified: boolean; // подтвердил ли почту\r\n    rememberMe: boolean;\r\n    error?: string;\r\n\r\n    /* ????????\r\n    \"__v\": 0,\r\n    \"token\": \"f1081d00-3614-11ed-b186-bb9b23e58d65\",\r\n    \"tokenDeathTime\": 1663380708944\r\n     */\r\n}\r\n\r\nexport type BlockContentResponseType = {\r\n    user: string\r\n    blockedCardPacksCount: number\r\n}\r\n\r\nexport type AddedUserType = AuthResponseType & {\r\n    __v: number\r\n}\r\n\r\nexport type RegisterResponseType = {\r\n    'addedUser': AddedUserType\r\n}\r\n\r\nexport type UpdatedUserResponseType = {\r\n    updatedUser: AuthResponseType\r\n}","import {authAPI, RegisterParamsType} from \"../../api/api\";\r\nimport {ThunkType} from \"./store\";\r\nimport {setAppErrorAC, setAppStatusAC} from \"./app-reducer\";\r\n\r\ntype InitialStateType = {\r\n    isRegister: boolean\r\n}\r\nconst initialState: InitialStateType = {\r\n    isRegister: false\r\n}\r\n\r\nexport const authReducer = (state = initialState, action: AuthActionsType): InitialStateType => {\r\n    switch (action.type){\r\n        case 'SET_IS_REGISTER':{\r\n            return {...state, isRegister: action.isRegister}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport const setIsRegisterAC = (isRegister: boolean) => ({type:'SET_IS_REGISTER', isRegister} as const )\r\n\r\nexport const registrationTC = (data: RegisterParamsType): ThunkType => (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.register(data)\r\n        .then(res => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setIsRegisterAC(true))\r\n        })\r\n        .catch((e) => {\r\n            if (e.response.data.error){\r\n                dispatch(setAppErrorAC(e.response.data.error))\r\n                dispatch(setAppStatusAC('failed'))\r\n            }\r\n        })\r\n        .finally(()=>{\r\n            dispatch(setIsRegisterAC(false))\r\n        })\r\n}\r\n\r\nexport type AuthActionsType = ReturnType<typeof setIsRegisterAC>","import {setAppErrorAC, setAppStatusAC} from './app-reducer';\r\nimport {ThunkType} from './store';\r\nimport {authAPI, AuthResponseType} from '../../api/api';\r\n\r\n\r\nconst initialState: LoginStateType = {\r\n    data: {\r\n        _id: '',\r\n        email: '',\r\n        name: '',\r\n        avatar: '',\r\n        publicCardPacksCount: 0,  // количество колод\r\n        created: new Date(),\r\n        updated: new Date(),\r\n        isAdmin: false,\r\n        verified: false, // подтвердил ли почту\r\n        rememberMe: false,\r\n        error: ''\r\n    },\r\n    isAuth: false\r\n}\r\n\r\nexport const loginReducer = (state: LoginStateType = initialState, action: LoginActionType): LoginStateType => {\r\n    switch (action.type) {\r\n        case 'LOGIN/GET-USER-DATA':\r\n            return {...state, data: action.data, isAuth: action.isAuth}\r\n        case 'LOGIN/UPDATE-USER-DATA-INFO':\r\n            return {...state, data: action.data}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// action\r\nexport const getUserData = (data: AuthResponseType, isAuth: boolean) =>\r\n    ({type: 'LOGIN/GET-USER-DATA', data, isAuth} as const)\r\nexport const updateUserDataInfo = (data: AuthResponseType) =>\r\n    ({type: 'LOGIN/UPDATE-USER-DATA-INFO', data} as const)\r\n\r\n// thunk\r\nexport const loginTC = (email: string, password: string, rememberMe: boolean): ThunkType => async dispatch => {\r\n    try {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const res = await authAPI.login({email, password, rememberMe})\r\n        dispatch(getUserData(res.data, true));\r\n    } catch (e: any) {\r\n        const error = e.response ? e.response.data.error : (e.message + ', more details in the console');\r\n        dispatch(setAppErrorAC(error))\r\n    } finally {\r\n        dispatch(setAppStatusAC('idle'));\r\n    }\r\n}\r\nexport const updateUserInfo = (name: string, avatar: string): ThunkType => async dispatch => {\r\n    try {\r\n        dispatch(setAppStatusAC('loading'))\r\n        let temp: string = avatar\r\n        temp = ' '\r\n        const data = {name, avatar: temp}\r\n        const res = await authAPI.updateProfile(data)\r\n        dispatch(updateUserDataInfo(res.data.updatedUser))\r\n    } catch (e: any) {\r\n        const error = e.response ? e.response.data.error : (e.message + ', more details in the console');\r\n        dispatch(setAppErrorAC(error))\r\n    } finally {\r\n        dispatch(setAppStatusAC('idle'))\r\n    }\r\n}\r\n\r\n// type\r\nexport type LoginActionType = ReturnType<typeof getUserData> | ReturnType<typeof updateUserDataInfo>\r\n\r\ntype LoginStateType = {\r\n    data: AuthResponseType\r\n    isAuth: boolean\r\n}","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk, {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {AppActionsType, appReducer} from \"./app-reducer\";\r\nimport {AuthActionsType, authReducer} from \"./auth-reducer\";\r\nimport {LoginActionType, loginReducer} from './login-reducer';\r\nimport {TypedUseSelectorHook, useDispatch, useSelector} from 'react-redux';\r\n\r\nconst rootReducer = combineReducers({\r\n    app: appReducer,\r\n    auth: authReducer,\r\n    login: loginReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n\r\nexport type RootActionsType = AppActionsType | AuthActionsType | LoginActionType\r\n\r\nexport type ThunkType<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, RootActionsType>\r\nexport type AppDispatch = ThunkDispatch< AppRootStateType, unknown, RootActionsType>\r\n\r\n// hooks\r\nexport const useAppDispatch: () => AppDispatch = useDispatch\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\n\r\nexport const styleBtn: React.CSSProperties = {\r\n    borderRadius: '18px',\r\n    margin: \"50px auto 30px\",\r\n    width: \"347px\",\r\n    height: \"36px\",\r\n    textTransform: \"none\",\r\n    background: \"#366EFF\",\r\n    fontSize: \"16px\",\r\n    fontWeight: \"500\",\r\n    color: \"#fff\"\r\n}\r\nexport const styleForm: React.CSSProperties = {\r\n    marginTop: \"84px\",\r\n    padding: '20px',\r\n    textAlign: 'center',\r\n    width: \"410px\",\r\n    minHeight: \"500px\",\r\n    borderRadius: \"2px\",\r\n    backgroundColor: \"#fff\",\r\n    boxShadow: \"0 0 5px rgba(0,0,0,0.3)\",\r\n}\r\nexport const styleInput: React.CSSProperties = {\r\n    margin: \"20px auto 0\",\r\n    width: \"347px\",\r\n}\r\nexport const styleRememberMe: React.CSSProperties = {\r\n    width: \"347px\",\r\n    margin: \"20px\",\r\n    color: \"#000000\",\r\n    fontSize: \"27px\",\r\n}\r\nexport const styleRequired: React.CSSProperties = {\r\n    fontSize: '13px',\r\n    color: 'red'\r\n}","import React from 'react';\r\nimport s from './Lodader.module.scss'\r\nimport {CircularProgress} from '@material-ui/core';\r\n\r\nexport const Loader = () => {\r\n    return (\r\n        <div className={s.overlay}>\r\n            <div className={s.progress}>\r\n                <CircularProgress size={50}/>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\n","import React from 'react';\r\nimport {IconButton, InputAdornment} from '@material-ui/core';\r\nimport VisibilityOff from \"@mui/icons-material/VisibilityOff\";\r\nimport Visibility from \"@mui/icons-material/Visibility\";\r\n\r\n\r\ntype VisibleIconPropsType = {\r\n    isVisible: boolean\r\n    setIsVisible: (i: boolean) => void\r\n}\r\n\r\nexport const VisibleIcon = (props: VisibleIconPropsType) => {\r\n\r\n    const handleClickShowPassword = () => {\r\n        props.setIsVisible(!props.isVisible)\r\n    };\r\n    const handleMouseDownPassword = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    return (\r\n        <InputAdornment position=\"end\">\r\n            <IconButton\r\n                aria-label=\"toggle password visibility\"\r\n                onClick={handleClickShowPassword}\r\n                onMouseDown={handleMouseDownPassword}\r\n            >\r\n                {props.isVisible ? <VisibilityOff/> : <Visibility/>}\r\n            </IconButton>\r\n        </InputAdornment>\r\n    );\r\n};\r\n\r\n","import {useAppDispatch, useAppSelector} from '../../app/redux/store';\r\nimport * as Yup from 'yup';\r\nimport {useState} from 'react';\r\nimport {useFormik} from 'formik';\r\nimport {loginTC} from '../../app/redux/login-reducer';\r\nimport {Link, Navigate} from 'react-router-dom';\r\nimport {PATH} from '../Header/Pages';\r\nimport {\r\n    Button,\r\n    Checkbox,\r\n    FormControl,\r\n    FormControlLabel,\r\n    FormGroup,\r\n    FormLabel,\r\n    Grid,\r\n    TextField\r\n} from '@material-ui/core';\r\nimport s from './Login.module.scss';\r\nimport {styleBtn, styleForm, styleInput, styleRememberMe, styleRequired} from './LoginMUI';\r\nimport {Loader} from '../../components/c7-Loader/Loader';\r\nimport {VisibleIcon} from '../../components/VisibleIconFroPassword/VisibleIcon';\r\n\r\nexport const Login = () => {\r\n    const dispatch = useAppDispatch()\r\n    const isAuth = useAppSelector<boolean>(state => state.login.isAuth)\r\n    const loadingStatus = useAppSelector<string>(state => state.app.status)\r\n    const [hidden, setHidden] = useState(true)\r\n\r\n    const handleClickShowPassword = () => {\r\n        setHidden(!hidden)\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validationSchema: Yup.object({\r\n            email: Yup.string().required().email('invalid email'),\r\n            password: Yup.string().required().min(7, 'min 7 characters'),\r\n        }),\r\n        onSubmit: (values, {setSubmitting}) => {\r\n            dispatch(loginTC(values.email, values.password, values.rememberMe));\r\n            setSubmitting(false)\r\n            formik.resetForm();\r\n        }\r\n    })\r\n\r\n    if (isAuth) {\r\n        return <Navigate to={PATH.PROFILE}/>\r\n    }\r\n    return (\r\n        <div className={s.login}>\r\n            {loadingStatus === 'loading' && <Loader/>}\r\n            <Grid container justifyContent={'center'} style={{padding: '30px'}}>\r\n                <Grid item>\r\n                    <form onSubmit={formik.handleSubmit}>\r\n                        <FormControl style={styleForm} variant={\"filled\"}>\r\n                            <FormLabel>\r\n                                <h1 className={s.styleH1}>Sign In</h1>\r\n                            </FormLabel>\r\n                            <FormGroup>\r\n                                <TextField\r\n                                    id={'email'}\r\n                                    style={styleInput}\r\n                                    label={'email'}\r\n                                    error={formik.touched.email && !!formik.errors.email}\r\n                                    variant=\"standard\"\r\n                                    {...formik.getFieldProps('email')}\r\n                                />\r\n                                {formik.touched.email\r\n                                    && formik.errors.email\r\n                                    && <div style={styleRequired}>{formik.errors.email}</div>}\r\n                                <TextField\r\n                                    id={'password'}\r\n                                    style={styleInput}\r\n                                    variant=\"standard\"\r\n                                    error={formik.touched.password && !!formik.errors.password}\r\n                                    label={'password'}\r\n                                    type={hidden ? 'password' : 'text'}\r\n                                    {...formik.getFieldProps('password')}\r\n                                    InputProps={{\r\n                                        endAdornment: (\r\n                                            <VisibleIcon isVisible={hidden} setIsVisible={handleClickShowPassword}/>\r\n                                        )\r\n                                    }}\r\n                                />\r\n                                {formik.touched.password\r\n                                    && formik.errors.password\r\n                                    && <div style={styleRequired}>{formik.errors.password}</div>}\r\n                                <FormControlLabel\r\n                                    style={styleRememberMe}\r\n                                    label={'Remember me'}\r\n                                    control={<Checkbox color=\"primary\" checked={formik.values.rememberMe}/>}\r\n                                    {...formik.getFieldProps('rememberMe')}\r\n                                />\r\n                                <div style={{textAlign: \"right\", marginRight: \"33px\"}}>\r\n                                    <Link className={s.forgotPassword} to={PATH.PASSWORD_RECOVERY}>Forgot\r\n                                        Password</Link>\r\n                                </div>\r\n                                <Button style={styleBtn} variant=\"contained\" type={'submit'}>Sign In</Button>\r\n                                <FormLabel>\r\n                                    <p className={s.styleP}>Don't have an account?</p>\r\n                                    <Link className={s.signUp} to={PATH.REGISTRATION}>Sign Up</Link>\r\n                                </FormLabel>\r\n                            </FormGroup>\r\n                        </FormControl>\r\n                    </form>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n","import React from 'react';\r\nimport s from './PasswordRecovery.module.scss';\r\n\r\nexport const PasswordRecovery = () => {\r\n    return (\r\n        <div className={s.passwordRecovery}>\r\n            PasswordRecovery\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport s from './Profile.module.scss';\r\n\r\nexport const Profile = () => {\r\n    return (\r\n        <div className={s.profile}>\r\n            Profile\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {useState} from 'react';\r\nimport s from './Registration.module.scss';\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Button, FormControl, FormGroup, FormLabel, Grid, Paper} from \"@material-ui/core\";\r\nimport {registrationTC} from \"../../app/redux/auth-reducer\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport OutlinedInput from \"@mui/material/OutlinedInput\";\r\nimport {Navigate, NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../Header/Pages\";\r\nimport {AppRootStateType} from \"../../app/redux/store\";\r\nimport {RegisterParamsType} from \"../../api/api\";\r\nimport {VisibleIcon} from \"../../components/VisibleIconFroPassword/VisibleIcon\";\r\n\r\n\r\nexport const Registration = () => {\r\n\r\n    return <Grid container className={s.registration} justifyContent={'center'}>\r\n        <Paper elevation={5} style={{padding: '20px 50px'}}>\r\n            <RegisterForm/>\r\n        </Paper>\r\n    </Grid>\r\n}\r\n\r\nconst RegisterForm = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const isRegister = useSelector<AppRootStateType, boolean>(state => state.auth.isRegister)\r\n    const [isVisible, setIsVisible] = useState<boolean>(false)\r\n\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        confirmPassword?: string\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            confirmPassword: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = 'Required'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length < 7) {\r\n                errors.password = 'Invalid password'\r\n            }\r\n\r\n            if (!values.confirmPassword) {\r\n                errors.confirmPassword = 'Required'\r\n            } else if (values.confirmPassword.length < 8) {\r\n                errors.confirmPassword = 'Invalid password'\r\n            } else if (values.password !== values.confirmPassword) {\r\n                errors.confirmPassword = 'passwords must be equal'\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            const registrationValues: RegisterParamsType = {email: values.email, password: values.password}\r\n            dispatch(registrationTC(registrationValues))\r\n            if (isRegister){\r\n                formik.resetForm()\r\n            }\r\n        },\r\n    })\r\n\r\n    const emailError = formik.touched.email && formik.errors.email ? <div>{formik.errors.email}</div> : null\r\n    const passwordError = formik.touched.password && formik.errors.password ? <div>{formik.errors.password}</div> : null\r\n    const confirmPasswordError = formik.touched.confirmPassword && formik.errors.confirmPassword ?\r\n        <div>{formik.errors.confirmPassword}</div> : null\r\n\r\n    if (isRegister) return <Navigate to={PATH.LOGIN}/>\r\n\r\n    return <form onSubmit={formik.handleSubmit}>\r\n        <FormControl className={s.form}>\r\n            <h1 className={s.formLabel}>\r\n                SIGN UP\r\n            </h1>\r\n            <FormGroup>\r\n                <FormControl>\r\n                    <InputLabel>Email</InputLabel>\r\n                    <OutlinedInput\r\n                        error={!!emailError}\r\n                        {...formik.getFieldProps('email')}\r\n                    />\r\n                    <div className={s.error}>{emailError}</div>\r\n                </FormControl>\r\n                <FormControl>\r\n                    <InputLabel>Password</InputLabel>\r\n                    <OutlinedInput\r\n                        type={isVisible ? 'text' : 'password'}\r\n                        error={!!passwordError}\r\n                        {...formik.getFieldProps('password')}\r\n                        endAdornment={<VisibleIcon isVisible={isVisible} setIsVisible={setIsVisible}/>}\r\n                    />\r\n                    <div className={s.error}>{passwordError}</div>\r\n                </FormControl>\r\n                <FormControl>\r\n                    <InputLabel>Confirm password</InputLabel>\r\n                    <OutlinedInput\r\n                        type={isVisible ? 'text' : 'password'}\r\n                        error={!!confirmPasswordError}\r\n                        {...formik.getFieldProps('confirmPassword')}\r\n                        endAdornment={<VisibleIcon isVisible={isVisible} setIsVisible={setIsVisible}/>}\r\n                    />\r\n                    <div className={s.error}>{confirmPasswordError}</div>\r\n                </FormControl>\r\n                <Button\r\n                    type={'submit'} variant={'contained'} color={'primary'}>\r\n                    Sign up\r\n                </Button>\r\n                <FormLabel className={s.formLabel}>\r\n                    <div>Already have an account? <NavLink to={PATH.LOGIN}>SIGN IN</NavLink></div>\r\n                </FormLabel>\r\n            </FormGroup>\r\n        </FormControl>\r\n    </form>\r\n}","import React from 'react';\r\nimport s from './EnteringANewPassword.module.scss';\r\n\r\nexport const EnteringANewPassword = () => {\r\n    return (\r\n        <div className={s.enteringANewPassword}>\r\n            EnteringANewPassword\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport s from './Welcome.module.scss';\r\n\r\nexport const Welcome = () => {\r\n    return (\r\n        <div className={s.welcome}>\r\n            Welcome\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react'\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {Login} from \"../Login/Login\";\r\nimport {PasswordRecovery} from \"../PasswordRecovery/PasswordRecovery\";\r\nimport {Profile} from \"../Profile/Profile\";\r\nimport {Registration} from \"../Registration/Registration\";\r\nimport {EnteringANewPassword} from \"../EnteringANewPassword/EnteringANewPassword\";\r\nimport {Welcome} from \"../Welcome/Welcome\";\r\n\r\nexport const PATH = {\r\n    WELCOME: '/welcome',\r\n    LOGIN: '/login',\r\n    PASSWORD_RECOVERY: '/passwordRecovery',\r\n    REGISTRATION: '/registration',\r\n    NEW_PASSWORD: '/enteringANewPassword',\r\n    PROFILE: '/profile'\r\n}\r\n\r\nexport function Pages() {\r\n    return (\r\n        <div>\r\n            <Routes>\r\n                <Route path={'/'} element={<Navigate to={PATH.WELCOME}/>}/>\r\n\r\n                <Route path={PATH.LOGIN} element={<Login/>}/>\r\n                <Route path={PATH.PASSWORD_RECOVERY} element={<PasswordRecovery/>}/>\r\n                <Route path={PATH.PROFILE} element={<Profile/>}/>\r\n                <Route path={PATH.REGISTRATION} element={<Registration/>}/>\r\n                <Route path={PATH.NEW_PASSWORD} element={<EnteringANewPassword/>}/>\r\n\r\n                <Route path={'/*'} element={<Welcome/>}/>\r\n            </Routes>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"./Pages\";\r\nimport s from './Header.module.scss'\r\n\r\nexport const Header = () => {\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={s.links}>\r\n                <NavLinkItem path={PATH.PROFILE} title={'Profile'}/>\r\n                <NavLinkItem path={PATH.LOGIN} title={'Login'}/>\r\n                <NavLinkItem path={PATH.REGISTRATION} title={'Registration'}/>\r\n                <NavLinkItem path={PATH.PASSWORD_RECOVERY} title={'Password recovery+'}/>\r\n                <NavLinkItem path={PATH.NEW_PASSWORD} title={'New password'}/>\r\n                <div className={s.link}>Hover me!</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst NavLinkItem = (props: NavLinkItemPropsType) => {\r\n    return <div className={s.link}>\r\n        <NavLink className={({isActive}) => isActive ? s.active : ''}\r\n                                            to={props.path}\r\n        >{props.title}</NavLink></div>\r\n}\r\ntype NavLinkItemPropsType = {\r\n    path: string\r\n    title: string\r\n}","import React from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useAppSelector} from \"../../app/redux/store\";\r\nimport {setAppErrorAC} from \"../../app/redux/app-reducer\";\r\nimport {Snackbar} from \"@material-ui/core\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useAppSelector(state => state.app.error)\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport {HashRouter} from 'react-router-dom';\r\nimport {Header} from \"../features/Header/Header\";\r\nimport {Pages} from \"../features/Header/Pages\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {useAppSelector} from \"./redux/store\";\r\nimport {LinearProgress} from \"@material-ui/core\";\r\n\r\nexport const App = () => {\r\n\r\n    const status = useAppSelector( state => state.app.status)\r\n\r\n    return (\r\n        <div>\r\n            <div style={{height:'5px'}}>{status === 'loading' && <LinearProgress/>}</div>\r\n            <HashRouter>\r\n                <ErrorSnackbar/>\r\n                <Header/>\r\n                <Pages/>\r\n            </HashRouter>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {App} from \"./app/App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/redux/store\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();","// extracted by mini-css-extract-plugin\nmodule.exports = {\"registration\":\"Registration_registration__OSY5c\",\"form\":\"Registration_form__PAYQL\",\"error\":\"Registration_error__3SRYL\",\"formLabel\":\"Registration_formLabel__1M3OE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__2U0rP\",\"styleH1\":\"Login_styleH1__1DY35\",\"styleP\":\"Login_styleP__2ij4J\",\"signUp\":\"Login_signUp__-Vryv\",\"forgotPassword\":\"Login_forgotPassword__yNRDo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Header_container__aGOgC\",\"links\":\"Header_links__3UEMk\",\"link\":\"Header_link__X9MNl\",\"active\":\"Header_active__3y_9i\"};"],"sourceRoot":""}